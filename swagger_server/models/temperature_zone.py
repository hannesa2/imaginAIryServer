# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TemperatureZone(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, input_position: int=None, output_position: int=None, zone: str=None):  # noqa: E501
        """TemperatureZone - a model defined in Swagger

        :param id: The id of this TemperatureZone.  # noqa: E501
        :type id: int
        :param name: The name of this TemperatureZone.  # noqa: E501
        :type name: str
        :param input_position: The input_position of this TemperatureZone.  # noqa: E501
        :type input_position: int
        :param output_position: The output_position of this TemperatureZone.  # noqa: E501
        :type output_position: int
        :param zone: The zone of this TemperatureZone.  # noqa: E501
        :type zone: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'input_position': int,
            'output_position': int,
            'zone': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'input_position': 'inputPosition',
            'output_position': 'outputPosition',
            'zone': 'zone'
        }
        self._id = id
        self._name = name
        self._input_position = input_position
        self._output_position = output_position
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt) -> 'TemperatureZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TemperatureZone of this TemperatureZone.  # noqa: E501
        :rtype: TemperatureZone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TemperatureZone.

        the unique identifier for the zone  # noqa: E501

        :return: The id of this TemperatureZone.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TemperatureZone.

        the unique identifier for the zone  # noqa: E501

        :param id: The id of this TemperatureZone.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this TemperatureZone.


        :return: The name of this TemperatureZone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TemperatureZone.


        :param name: The name of this TemperatureZone.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def input_position(self) -> int:
        """Gets the input_position of this TemperatureZone.


        :return: The input_position of this TemperatureZone.
        :rtype: int
        """
        return self._input_position

    @input_position.setter
    def input_position(self, input_position: int):
        """Sets the input_position of this TemperatureZone.


        :param input_position: The input_position of this TemperatureZone.
        :type input_position: int
        """

        self._input_position = input_position

    @property
    def output_position(self) -> int:
        """Gets the output_position of this TemperatureZone.


        :return: The output_position of this TemperatureZone.
        :rtype: int
        """
        return self._output_position

    @output_position.setter
    def output_position(self, output_position: int):
        """Sets the output_position of this TemperatureZone.


        :param output_position: The output_position of this TemperatureZone.
        :type output_position: int
        """

        self._output_position = output_position

    @property
    def zone(self) -> str:
        """Gets the zone of this TemperatureZone.


        :return: The zone of this TemperatureZone.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone: str):
        """Sets the zone of this TemperatureZone.


        :param zone: The zone of this TemperatureZone.
        :type zone: str
        """

        self._zone = zone
