# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ForecastTemperature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, low: float=None, high: float=None, morning: float=None, day: float=None, evening: float=None, night: float=None):  # noqa: E501
        """ForecastTemperature - a model defined in Swagger

        :param low: The low of this ForecastTemperature.  # noqa: E501
        :type low: float
        :param high: The high of this ForecastTemperature.  # noqa: E501
        :type high: float
        :param morning: The morning of this ForecastTemperature.  # noqa: E501
        :type morning: float
        :param day: The day of this ForecastTemperature.  # noqa: E501
        :type day: float
        :param evening: The evening of this ForecastTemperature.  # noqa: E501
        :type evening: float
        :param night: The night of this ForecastTemperature.  # noqa: E501
        :type night: float
        """
        self.swagger_types = {
            'low': float,
            'high': float,
            'morning': float,
            'day': float,
            'evening': float,
            'night': float
        }

        self.attribute_map = {
            'low': 'low',
            'high': 'high',
            'morning': 'morning',
            'day': 'day',
            'evening': 'evening',
            'night': 'night'
        }
        self._low = low
        self._high = high
        self._morning = morning
        self._day = day
        self._evening = evening
        self._night = night

    @classmethod
    def from_dict(cls, dikt) -> 'ForecastTemperature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ForecastTemperature of this ForecastTemperature.  # noqa: E501
        :rtype: ForecastTemperature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def low(self) -> float:
        """Gets the low of this ForecastTemperature.


        :return: The low of this ForecastTemperature.
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low: float):
        """Sets the low of this ForecastTemperature.


        :param low: The low of this ForecastTemperature.
        :type low: float
        """

        self._low = low

    @property
    def high(self) -> float:
        """Gets the high of this ForecastTemperature.


        :return: The high of this ForecastTemperature.
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high: float):
        """Sets the high of this ForecastTemperature.


        :param high: The high of this ForecastTemperature.
        :type high: float
        """

        self._high = high

    @property
    def morning(self) -> float:
        """Gets the morning of this ForecastTemperature.


        :return: The morning of this ForecastTemperature.
        :rtype: float
        """
        return self._morning

    @morning.setter
    def morning(self, morning: float):
        """Sets the morning of this ForecastTemperature.


        :param morning: The morning of this ForecastTemperature.
        :type morning: float
        """

        self._morning = morning

    @property
    def day(self) -> float:
        """Gets the day of this ForecastTemperature.


        :return: The day of this ForecastTemperature.
        :rtype: float
        """
        return self._day

    @day.setter
    def day(self, day: float):
        """Sets the day of this ForecastTemperature.


        :param day: The day of this ForecastTemperature.
        :type day: float
        """

        self._day = day

    @property
    def evening(self) -> float:
        """Gets the evening of this ForecastTemperature.


        :return: The evening of this ForecastTemperature.
        :rtype: float
        """
        return self._evening

    @evening.setter
    def evening(self, evening: float):
        """Sets the evening of this ForecastTemperature.


        :param evening: The evening of this ForecastTemperature.
        :type evening: float
        """

        self._evening = evening

    @property
    def night(self) -> float:
        """Gets the night of this ForecastTemperature.


        :return: The night of this ForecastTemperature.
        :rtype: float
        """
        return self._night

    @night.setter
    def night(self, night: float):
        """Sets the night of this ForecastTemperature.


        :param night: The night of this ForecastTemperature.
        :type night: float
        """

        self._night = night
