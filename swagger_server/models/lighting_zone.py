# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LightingZone(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, device_id: int=None, device_type: str=None, zone: str=None):  # noqa: E501
        """LightingZone - a model defined in Swagger

        :param id: The id of this LightingZone.  # noqa: E501
        :type id: str
        :param name: The name of this LightingZone.  # noqa: E501
        :type name: str
        :param device_id: The device_id of this LightingZone.  # noqa: E501
        :type device_id: int
        :param device_type: The device_type of this LightingZone.  # noqa: E501
        :type device_type: str
        :param zone: The zone of this LightingZone.  # noqa: E501
        :type zone: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'device_id': int,
            'device_type': str,
            'zone': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'device_id': 'deviceId',
            'device_type': 'deviceType',
            'zone': 'zone'
        }
        self._id = id
        self._name = name
        self._device_id = device_id
        self._device_type = device_type
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt) -> 'LightingZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LightingZone of this LightingZone.  # noqa: E501
        :rtype: LightingZone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this LightingZone.


        :return: The id of this LightingZone.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this LightingZone.


        :param id: The id of this LightingZone.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this LightingZone.


        :return: The name of this LightingZone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this LightingZone.


        :param name: The name of this LightingZone.
        :type name: str
        """

        self._name = name

    @property
    def device_id(self) -> int:
        """Gets the device_id of this LightingZone.


        :return: The device_id of this LightingZone.
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: int):
        """Sets the device_id of this LightingZone.


        :param device_id: The device_id of this LightingZone.
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def device_type(self) -> str:
        """Gets the device_type of this LightingZone.


        :return: The device_type of this LightingZone.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type: str):
        """Sets the device_type of this LightingZone.


        :param device_type: The device_type of this LightingZone.
        :type device_type: str
        """
        allowed_values = ["dimmer", "switch"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def zone(self) -> str:
        """Gets the zone of this LightingZone.


        :return: The zone of this LightingZone.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone: str):
        """Sets the zone of this LightingZone.


        :param zone: The zone of this LightingZone.
        :type zone: str
        """

        self._zone = zone
